// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/4.2/esri/copyright.txt for details.
//>>built
define("require exports ../core/tsSupport/declareExtendsHelper ../core/tsSupport/decorateHelper ../core/accessorSupport/decorators ./Layer ./FeatureLayer ./support/Field ./support/LabelClass ./mixins/SceneService ../PopupTemplate ../request ../core/lang ../core/kebabDictionary ../core/requireUtils ../core/promiseUtils ../core/Error ../core/Logger ../core/accessorSupport/PropertyOrigin ../core/accessorSupport/utils ../renderers/support/jsonUtils ../renderers/support/styleUtils ../portal/PortalItem dojo/_base/lang dojo/promise/all".split(" "),
function(u,M,v,e,d,w,l,x,y,z,m,n,A,B,C,g,f,D,h,E,F,G,H,I,p){var q=B({onTheGround:"on-the-ground",relativeToGround:"relative-to-ground",absoluteHeight:"absolute-height"}),J=["3DObject","Point"],k=D.getLogger("esri.layers.SceneLayer"),r={"mesh-pyramids":"mesh-pyramids",meshpyramids:"mesh-pyramids","features-meshes":"mesh-pyramids",points:"points","features-points":"points",lines:"lines","features-lines":"lines",polygons:"polygons","features-polygons":"polygons"},K={"mesh-pyramids":"mesh",points:"point",
lines:"polyline",polygons:"polygon"};return function(s){function b(a,c){s.call(this);this.operationalLayerType="ArcGISSceneServiceLayer";this.type="scene";this.fields=[];this.elevationInfo=null;this.labelsVisible=!1;this.labelingInfo=null;this.legendEnabled=!0;this.renderer=null;this.cachedDrawingInfo={color:!1};this.popupEnabled=!0;this.objectIdFilter=this.objectIdField=this.popupTemplate=null;this._fieldUsageInfo={}}v(b,s);b.prototype.normalizeCtorArgs=function(a,c){return"string"===typeof a?I.mixin({},
{url:a},c):a};b.prototype.getField=function(a){return this._fieldLookup(this.fields,a)};b.prototype.readElevationInfo=function(a){a=A.clone(a);a.mode=q.fromJSON(a.mode);return a};b.prototype.writeElevationInfo=function(a,c){if(a&&(a.mode||a.offset||a.featureExpression)){var b={};a.mode&&(b.mode=q.toJSON(a.mode));a.offset&&(b.offset=a.offset);a.featureExpression&&(b.featureExpression=a.featureExpression);c.layerDefinition={elevationInfo:b}}};Object.defineProperty(b.prototype,"geometryType",{get:function(){return K[this.profile]||
"mesh"},enumerable:!0,configurable:!0});b.prototype.readLabelsVisible=function(a,c){return c.showLabels};b.prototype.writeLabelsVisible=function(a,c){a&&(c.showLabels=!0)};b.prototype.readLabelingInfo=function(a,c,b){var d=this;a=c.drawingInfo.labelingInfo;if(!a)return null;var e=/\[([^\[\]]+)\]/ig,t=null!=c.fields&&Array.isArray(c.fields)?c.fields:null,L=function(a,c){var b=d._fieldLookup(t,c);return"["+(b&&b.name||c)+"]"};return a.map(function(a){var c=new y;c.read(a,b);if((a=c.labelExpression)&&
t)c.labelExpression=a.replace(e,L);return c})};b.prototype.writeLabelingInfo=function(a,c,b){a&&(c.layerDefinition={drawingInfo:{labelingInfo:a.map(function(a){return a.write({},b)})}})};b.prototype.readLegendEnabled=function(a,c){return null!=c.showLegend?c.showLegend:!0};b.prototype.writeLegendEnabled=function(a,c){a||(c.showLegend=!1)};b.prototype.readRenderer=function(a,c,b){if(a=c.drawingInfo.renderer||void 0)(a=F.read(a,c,b)||void 0)||k.error("Failed to create renderer",{rendererDefinition:c.drawingInfo.renderer,
layer:this,context:b});return a};b.prototype.readCachedDrawingInfo=function(a,c){if(null==a||"object"!==typeof a)a={};null==a.color&&(a.color=!1);return a};b.prototype.readPopupEnabled=function(a,c){return null!=c.disablePopup?!c.disablePopup:void 0};b.prototype.writePopupEnabled=function(a,c){a||(c.disablePopup=!0)};b.prototype.readPopupTemplate=function(a,c){return c.popupInfo?m.fromJSON(c.popupInfo):void 0};b.prototype.writePopupTemplate=function(a,c){a&&(c.popupInfo=a.toJSON())};b.prototype.readObjectIdField=
function(a,c){!a&&c.fields&&c.fields.some(function(c){"esriFieldTypeOID"===c.type&&(a=c.name);return!!a});return a||void 0};b.prototype.readProfile=function(a,c){var b=c.store.profile;if(null!=b&&r[b])return r[b];k.error("Unknown or missing profile",{profile:b,layer:this});return"mesh-pyramids"};b.prototype.readNormalReferenceFrame=function(a,c){return c.store.normalReferenceFrame};b.prototype.load=function(){var a=this,c=this.loadFromPortal({supportedTypes:["Scene Service"]}).always(function(){return a._fetchService()}).then(function(){return p([a._verifyRootNodeAndUpdateExtent(),
a._setCompanionFeatureLayer()])}).then(function(){return a._applyCompanionOverrides()}).then(function(){return a._populateFieldUsageInfo()}).then(function(){return G.loadStyleRenderer(a,{origin:"service"})});this.addResolvingPromise(c);return this};b.prototype.createLayerView=function(a){var c=this;return C.when(u,null==this.profile||"mesh-pyramids"===this.profile?"../views/3d/layers/SceneLayerView3D":"../views/3d/layers/SceneLayerGraphicsView3D").then(function(b){return new b({view:a,layer:c})})};
b.prototype.read=function(a,c){this.inherited(arguments,[a,c]);a.layerDefinition&&this.inherited(arguments,[a.layerDefinition,c]);return this};b.prototype.queryExtent=function(a){return this._getCompanionLayerForQuery().then(function(c){return c.queryExtent(a)})};b.prototype.queryFeatureCount=function(a){return this._getCompanionLayerForQuery().then(function(c){return c.queryFeatureCount(a)})};b.prototype.queryFeatures=function(a){var c=this;return this._getCompanionLayerForQuery().then(function(c){return c.queryFeatures(a)}).then(function(a){if(a&&
a.features)for(var b=0,d=a.features;b<d.length;b++)d[b].layer=c;return a})};b.prototype.queryObjectIds=function(a){return this._getCompanionLayerForQuery().then(function(c){return c.queryObjectIds(a)})};b.prototype.getFieldUsageInfo=function(a){return this._fieldUsageInfo[a]||{supportsLabelingInfo:!1,supportsRenderer:!1,supportsPopupTemplate:!1,supportsLayerQuery:!1}};b.prototype._getCompanionLayerForQuery=function(){var a=this.companionFeatureLayer;return null!=a?g.resolve(a):g.reject(new f("scenelayer:query-not-available",
"SceneLayer queries are not available without companion feature layer"))};b.prototype._validateLayer=function(a){if(a.layerType&&-1===J.indexOf(a.layerType))throw new f("scenelayer:layer-type-not-supported","SceneLayer does not support this layer type",{layerType:a.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new f("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(1<this.version.major)throw new f("layer:service-version-too-new",
"Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});a=this.normalReferenceFrame;var c=this.spatialReference,b=!1,d=!1;if(null==a)d=b=!0;else switch(c=c&&c.isGeographic,a){case "east-north-up":case "earth-centered":b=!0;d=c;break;case "vertex-reference-frame":b=!0;d=!c;break;default:b=!1}if(!b)throw new f("scenelayer:unsupported-normal-reference-frame","Normal reference frame is invalid.");if(!d)throw new f("scenelayer:incompatible-normal-reference-frame",
"Normal reference frame is incompatible with scene spatial reference.");};b.prototype._populateFieldUsageInfo=function(){this._fieldUsageInfo={};if(this.fields)for(var a=function(a){var b=!(!c.attributeStorageInfo||!c.attributeStorageInfo.some(function(b){return b.name===a.name})),d=!(!c.companionFeatureLayer||!c.companionFeatureLayer.fields||!c.companionFeatureLayer.fields.some(function(b){return b&&a.name===b.name}));c._fieldUsageInfo[a.name]={supportsLabelingInfo:b,supportsRenderer:b,supportsPopupTemplate:b||
d,supportsLayerQuery:d}},c=this,b=0,d=this.fields;b<d.length;b++)a(d[b])};b.prototype._applyCompanionOverrides=function(){if(this.companionFeatureLayer){if(this.companionFeatureLayer.fields)for(var a=0,b=this.companionFeatureLayer.fields;a<b.length;a++){var d=b[a];this.getField(d.name)||this.fields.push(d.clone())}a=["popupTemplate","popupEnabled"];b=E.getProperties(this);for(d=0;d<a.length;d++){var e=a[d];this._buddyIsMoreImportant(e)&&(b.setDefaultOrigin(this.companionFeatureLayer.originOf(e)),
b.set(e,this.companionFeatureLayer[e]),b.setDefaultOrigin("user"))}}};b.prototype._setCompanionFeatureLayer=function(){var a=this;return this._fetchCompanionFeatureLayer().then(function(b){a.companionFeatureLayer=b})};b.prototype._fetchCompanionFeatureLayer=function(){var a=this;return-1===["mesh-pyramids","points"].indexOf(this.profile)?g.resolve(null):(this.portalItem&&this.portalItem.isResolved()?this._fetchCompanionFeatureLayerFromRelatedItems(this.portalItem):this._fetchCompanionFeatureLayerFromUrl()).then(function(a){return a.load()}).otherwise(function(b){null==
a.attributeStorageInfo?k.warn("Companion FeatureLayer could not be loaded and no binary attributes found. Popups will not work for this SceneLayer: "+a.title):k.info("Companion FeatureLayer could not be loaded. Falling back to binary attributes for Popups on this SceneLayer: "+a.title);return null})};b.prototype._fetchCompanionFeatureLayerFromRelatedItems=function(a){var b=this;return a.fetchRelatedItems({relationshipType:"Service2Data",direction:"forward"}).then(function(a){return(a=a.filter(function(a){return"Feature Service"===
a.type})[0])?b._fetchCompanionFeatureLayerFromPortalItem(new H({id:a.id,portal:a.portal})):b._fetchCompanionFeatureLayerFromUrl()}).otherwise(function(){return b._fetchCompanionFeatureLayerFromUrl()})};b.prototype._fetchCompanionFeatureLayerFromPortalItem=function(a){var b=this;return a.load().then(function(a){return b._findMatchingCompanionSublayerUrl(a.url)}).then(function(b){return g.resolve(new l({url:b,portalItem:a}))})};b.prototype._fetchCompanionFeatureLayerFromUrl=function(){return this._findMatchingCompanionSublayerUrl().then(function(a){return g.resolve(new l({url:a}))})};
b.prototype._findMatchingCompanionSublayerUrl=function(a){var b=this.parsedUrl.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);if(!b)return g.reject();null==a&&(a=b[1]+"/FeatureServer");var d=a.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1");a={query:{f:"json"},responseType:"json"};var e=b[1]+"/SceneServer",f=parseInt(b[2],10),b=n(this._addUrlToken(e),a).otherwise(function(a){return{layers:null}});a=n(this._addUrlToken(d),a);return p([a,b]).then(function(a){var b=a[0];a=a[1];a=a.data&&a.data.layers;
b=b.data&&b.data.layers;if(!Array.isArray(b))throw Error("expected layers array");if(Array.isArray(a))for(var c=0;c<Math.min(a.length,b.length);c++){if(a[c].id===f)return d+"/"+b[c].id}else if(f<b.length)return d+"/"+b[f].id;throw Error("could not find matching companion sublayer");})};b.prototype._buddyIsMoreImportant=function(a){if(!this.companionFeatureLayer)return!1;var b=h.nameToId(this.originOf(a));a=h.nameToId(this.companionFeatureLayer.originOf(a));return null!=a&&a<=h.OriginId.SERVICE?null==
b||b<h.OriginId.SERVICE:null!=a&&a<=h.OriginId.PORTAL_ITEM?null==b||b<h.OriginId.PORTAL_ITEM:!1};b.prototype._fieldLookup=function(a,b){for(var d=b.toLowerCase(),e=0;e<a.length;e++){var f=a[e];if(f.name.toLowerCase()===d)return f}return null};e([d.shared("esri.layers.SceneLayer")],b.prototype,"declaredClass",void 0);e([d.property()],b.prototype,"companionFeatureLayer",void 0);e([d.property()],b.prototype,"operationalLayerType",void 0);e([d.property({json:{readable:!1}})],b.prototype,"type",void 0);
e([d.property({type:[x]})],b.prototype,"fields",void 0);e([d.property({readOnly:!0})],b.prototype,"attributeStorageInfo",void 0);e([d.property()],b.prototype,"elevationInfo",void 0);e([d.read("elevationInfo")],b.prototype,"readElevationInfo",null);e([d.write("elevationInfo")],b.prototype,"writeElevationInfo",null);e([d.property({type:String,dependsOn:["profile"]})],b.prototype,"geometryType",null);e([d.property({type:Boolean})],b.prototype,"labelsVisible",void 0);e([d.read("labelsVisible",["showLabels"])],
b.prototype,"readLabelsVisible",null);e([d.write("labelsVisible")],b.prototype,"writeLabelsVisible",null);e([d.property()],b.prototype,"labelingInfo",void 0);e([d.read("labelingInfo",["drawingInfo.labelingInfo"])],b.prototype,"readLabelingInfo",null);e([d.write("labelingInfo")],b.prototype,"writeLabelingInfo",null);e([d.property({type:Boolean})],b.prototype,"legendEnabled",void 0);e([d.read("legendEnabled",["showLegend"])],b.prototype,"readLegendEnabled",null);e([d.write("legendEnabled")],b.prototype,
"writeLegendEnabled",null);e([d.property({json:{writeTo:"layerDefinition.drawingInfo.renderer"}})],b.prototype,"renderer",void 0);e([d.read("renderer",["drawingInfo.renderer"])],b.prototype,"readRenderer",null);e([d.property()],b.prototype,"cachedDrawingInfo",void 0);e([d.read("cachedDrawingInfo")],b.prototype,"readCachedDrawingInfo",null);e([d.property({type:Boolean})],b.prototype,"popupEnabled",void 0);e([d.read("popupEnabled",["disablePopup"])],b.prototype,"readPopupEnabled",null);e([d.write("popupEnabled")],
b.prototype,"writePopupEnabled",null);e([d.property({type:m})],b.prototype,"popupTemplate",void 0);e([d.read("popupTemplate",["popupInfo"])],b.prototype,"readPopupTemplate",null);e([d.write("popupTemplate")],b.prototype,"writePopupTemplate",null);e([d.property({type:String})],b.prototype,"objectIdField",void 0);e([d.read("objectIdField",["fields"])],b.prototype,"readObjectIdField",null);e([d.property()],b.prototype,"objectIdFilter",void 0);e([d.property({type:String})],b.prototype,"profile",void 0);
e([d.read("profile",["store.profile"])],b.prototype,"readProfile",null);e([d.property({readOnly:!0,type:String})],b.prototype,"normalReferenceFrame",void 0);e([d.read("normalReferenceFrame",["store.normalReferenceFrame"])],b.prototype,"readNormalReferenceFrame",null);return b=e([d.subclass()],b)}(d.declared(w,z))});