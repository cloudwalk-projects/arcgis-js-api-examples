// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/3.19/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/layers/vectorTiles/views/vectorTiles/renderers/shaders/iconShader.vs.glsl":"attribute vec2 a_pos;\r\nattribute vec2 a_vertexOffset;\r\nattribute vec4 a_tex;\r\nattribute vec4 a_levelInfo;\r\n\r\n// the relative transformation of a vertex given in tile coordinates to a relative normalized coordinate\r\n// relative to the tile's upper left corner\r\n// the extrusion vector.\r\nuniform highp mat4 u_transformMatrix;\r\n// the extrude matrix which is responsible for the 'anti-zoom' as well as the rotation\r\nuniform highp mat4 u_extrudeMatrix;\r\n// u_normalized_origin is the tile's upper left corner given in normalized coordinates\r\nuniform highp vec2 u_normalized_origin;\r\n// the size of the mosaic given in pixels\r\nuniform vec2 u_mosaicSize;\r\n// the z of the layer. Given by the order of the layers in the style\r\nuniform mediump float u_depth;\r\n// the map's rotation from the north\r\nuniform mediump float u_mapRotation;\r\nuniform mediump float u_level;\r\n// indicate whether the current set of iconst should be kept upright when the map is rotated\r\nuniform lowp float u_keepUpright;\r\n// the rate of the change in the opacity (fade) of the icons\r\nuniform mediump float u_fadeSpeed;\r\n// the low level we transition (to/from)\r\nuniform mediump float u_minfadeLevel;\r\n// the high level we transition (to/from)\r\nuniform mediump float u_maxfadeLevel;\r\n// the amount of fade given teh current time past the last recorded level\r\nuniform mediump float u_fadeChange;\r\n// the opacity of the layer given by the painter\r\nuniform mediump float u_opacity;\r\n// the interpolated texture coordinate value to be used by the fragment shader in order to sample the sprite texture\r\nvarying lowp vec2 v_tex;\r\n// the calculated transparency to be applied by the fragment shader. It is incorporating both the fade as well as the\r\n// opacity of the layer given by the painter\r\nvarying lowp float v_transparency;\r\n\r\n// the vertex offsets are given in integers, therefore in order to maintain a reasonable precission we multiply the values\r\n// by 16 and then at the shader devide by the same number\r\nconst float offsetPrecision \x3d 1.0 / 32.0;\r\n\r\nvoid main()\r\n{\r\n  mediump float a_labelMinLevel \x3d a_levelInfo[0];\r\n  mediump float a_angle        \x3d a_levelInfo[1];\r\n  mediump float a_minLevel    \x3d a_levelInfo[2];\r\n  mediump float a_maxLevel    \x3d a_levelInfo[3];\r\n\r\n  // if the given vertex should not be visible simply clip it by adding it a value that will push it outside the clipping plane\r\n  mediump float delta_z \x3d 0.0;\r\n\r\n  // If the label rotates with the map, and if the rotated label is upside down, hide it\r\n  mediump float rotated \x3d mod(a_angle - u_mapRotation, 256.0);\r\n  delta_z +\x3d (1.0 - step(u_keepUpright,0.0)) * step(65.0,rotated) * (1.0 - step(193.0,rotated)); //ie. z +\x3d (flip \x3e 0) \x26\x26 (65 \x3c\x3d rotated) \x26\x26 (rotated \x3c 193)\r\n\r\n  // u_level is the current service level adjusted for the change in font size\r\n  delta_z +\x3d 1.0 - step(a_minLevel, u_level); // Test if (level \x3c minLevel)\r\n  delta_z +\x3d step(a_maxLevel, u_level); // Test if (maxLevel \x3c\x3d level)\r\n\r\n  // calculate the alpha given the change in the fade and the fade-speed\r\n  lowp float alpha \x3d clamp((u_fadeChange - a_labelMinLevel) / u_fadeSpeed, 0.0, 1.0);\r\n\r\n  // if the speed is positive we are zooming in and therefore we need to 'fade-in'. Else we need to 'fade-out'\r\n  v_transparency \x3d (u_fadeSpeed \x3e\x3d 0.0 ? alpha : 1.0 - alpha);\r\n\r\n  // now deal with the min/max fade-levels. If we exceeded the level we simply snap to 0 or 1\r\n  if (u_maxfadeLevel \x3c a_labelMinLevel)\r\n  {\r\n      v_transparency \x3d 0.0;\r\n  }\r\n  if (u_minfadeLevel \x3e\x3d a_labelMinLevel)\r\n  {\r\n      v_transparency \x3d 1.0;\r\n  }\r\n\r\n  // if label had been faded out, clip it\r\n  delta_z +\x3d step(v_transparency, 0.0);\r\n\r\n  gl_Position \x3d vec4(u_normalized_origin, u_depth, 0.0) + u_transformMatrix * vec4(a_pos, 0.0, 1.0) + u_extrudeMatrix * vec4(offsetPrecision * a_vertexOffset, delta_z, 0.0);\r\n  v_tex \x3d a_tex.xy / u_mosaicSize;\r\n\r\n  v_transparency *\x3d u_opacity;\r\n}\r\n",
"url:esri/layers/vectorTiles/views/vectorTiles/renderers/shaders/iconShader.fs.glsl":"uniform lowp sampler2D u_texture;\r\nvarying lowp vec2 v_tex;\r\nvarying lowp float v_transparency;\r\n\r\nvoid main()\r\n{\r\n  lowp vec4 color \x3d texture2D(u_texture, v_tex);\r\n  gl_FragColor \x3d v_transparency * color;\r\n}\r\n"}});
define("esri/layers/vectorTiles/views/vectorTiles/renderers/IconRenderer","require exports ../../../core/libs/gl-matrix/mat4 ../../../core/libs/gl-matrix/vec3 dojo/text!./shaders/iconShader.vs.glsl dojo/text!./shaders/iconShader.fs.glsl ../../webgl/Program ../../webgl/VertexArrayObject ../GeometryUtils".split(" "),function(w,x,h,k,l,s,t,u,v){return function(){function a(){this._attributeLocations={a_pos:0,a_vertexOffset:1,a_tex:2,a_levelInfo:3};this._spritesTextureSize=new Float32Array(2);this._initialized=
!1;this._extrudeMat=h.create();this._scaleVec=k.create()}a.prototype.render=function(b,q,c,e,a,m,d,f,k,l,n){this._initialized||this._initialize(b);n*=d.getPaintValue("icon-opacity",c);var g=d.getLayoutValue("icon-rotation-alignment",c);1===g&&1===d.getLayoutValue("symbol-placement",c)&&!d.hasLayoutProperty("icon-rotation-alignment")&&(g=0);var r=0===g,g=d.getLayoutValue("icon-keep-upright",c)&&r,p=d.getLayoutValue("icon-size",c);e=v.degToByte(e);this._spritesTextureSize[0]=f.width/4;this._spritesTextureSize[1]=
f.height/4;r?h.copy(this._extrudeMat,k):h.copy(this._extrudeMat,l);1!==p&&(this._scaleVec[0]=p,this._scaleVec[1]=p,this._scaleVec[2]=1,h.scale(this._extrudeMat,this._extrudeMat,this._scaleVec));f.bind(b,9729,0);b.bindProgram(this._iconProgram);if(f=this._getIconVAO(b,m))b.bindVAO(f),this._iconProgram.setUniformMatrix4fv("u_transformMatrix",m.tileTransform.transform),this._iconProgram.setUniformMatrix4fv("u_extrudeMatrix",this._extrudeMat),this._iconProgram.setUniform2fv("u_normalized_origin",m.tileTransform.displayCoord),
this._iconProgram.setUniform1f("u_depth",d.z),this._iconProgram.setUniform2fv("u_mosaicSize",this._spritesTextureSize),this._iconProgram.setUniform1f("u_mapRotation",e),this._iconProgram.setUniform1f("u_keepUpright",g?1:0),this._iconProgram.setUniform1f("u_level",10*c),this._iconProgram.setUniform1f("u_fadeSpeed",10*a.fadeSpeed),this._iconProgram.setUniform1f("u_minfadeLevel",10*a.minfadeLevel),this._iconProgram.setUniform1f("u_maxfadeLevel",10*a.maxfadeLevel),this._iconProgram.setUniform1f("u_fadeChange",
10*(c+a.fadeChange)),this._iconProgram.setUniform1f("u_opacity",n),this._iconProgram.setUniform1i("u_texture",0),b.drawElements(4,q.marketElementCount,5125,12*q.markerElementStart),b.bindVAO()};a.prototype._initialize=function(b){if(this._initialized)return!0;this._iconProgram=new t(b,l,s,this._attributeLocations);this._iconVertexAttributes={geometry:[{name:"a_pos",count:2,type:5122,offset:0,stride:16,normalized:!1,divisor:0},{name:"a_vertexOffset",count:2,type:5122,offset:4,stride:16,normalized:!1,
divisor:0},{name:"a_tex",count:4,type:5121,offset:8,stride:16,normalized:!1,divisor:0},{name:"a_levelInfo",count:4,type:5121,offset:12,stride:16,normalized:!1,divisor:0}]};return this._initialized=!0};a.prototype._getIconVAO=function(b,a){if(a.iconVertexArrayObject)return a.iconVertexArrayObject;var c=a.iconVertexBuffer,e=a.iconIndexBuffer;if(!c||!e)return null;a.iconVertexArrayObject=new u(b,this._attributeLocations,this._iconVertexAttributes,{geometry:c},e);return a.iconVertexArrayObject};return a}()});