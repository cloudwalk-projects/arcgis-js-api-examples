<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<!--Vertex Shader for Atmosphere-->
<snippet name="vsRealisticAtmosphere"><![CDATA[
//
// Based on Atmospheric scattering vertex shader by Sean O'Neil from GPU Gems 2 Chapter 16.
//
// Link:                   http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter16.html
// Download Portal:        http://http.download.nvidia.com/developer/GPU_Gems_2/CD/Index.html
// Unmodified Source Code: http://http.download.nvidia.com/developer/GPU_Gems_2/CD/Content/16.zip
//
// Adapted for WebGIS by Jascha Grübel (jgruebel@esri.com), Zürich 2015
//

  precision mediump  float;

  //Camera
  uniform vec2 halfSizeNearPlane;
  uniform vec3 v3CameraUp;
  uniform vec3 v3CameraRight;
  uniform vec3 v3CameraDir;
  uniform vec2 v2CameraCenterOffset;

  //Attributes
  attribute vec3 $position;
  attribute vec2 $uv0;

  //Varyings
  varying vec3 v3WorldRay;
  varying vec2 vtc;

#ifdef HAZE
  varying vec3 v3EyeDir;
#endif

  void main(void) {
    vec3 v3Pos = $position;
    vtc = $uv0;
    vec2 rayvtc = $uv0 - v2CameraCenterOffset;

#ifdef HAZE
    v3EyeDir = vec3((2.0*halfSizeNearPlane *rayvtc)-halfSizeNearPlane,-1.0);
#else
    vec3 v3EyeDir = vec3((2.0*halfSizeNearPlane *rayvtc)-halfSizeNearPlane,-1.0);
#endif
    v3WorldRay = v3EyeDir.z*v3CameraDir + v3EyeDir.y*v3CameraUp + v3EyeDir.x*v3CameraRight;
    gl_Position = vec4(v3Pos, 1.0);
  }
]]></snippet>

<snippet name="atmosphereScaleFunction"><![CDATA[
  //Approximation for inner integral based on a radii ratio of 10.25:10
  float scale(float fCos){
    float x = 1.0 - fCos;
    return exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));
  }
]]></snippet>

<snippet name="toneMapperConstants"><![CDATA[
#ifdef HAZE
  const float fOneOverGamma = 1.0;//Gamma = 1.0
#else
  const float fOneOverGamma = 0.454545; // Gamma = 2.2
#endif
  const vec3 v3OneOverGamma = vec3(fOneOverGamma);

]]></snippet>

<snippet name="exponentialToneMapper"><![CDATA[
  //ToneMapping operators
  vec3 expTM(vec3 inputColor,float exposure){
      return pow(1.0 - exp(inputColor * -exposure), v3OneOverGamma);
  }
]]></snippet>

<snippet name="reinhardToneMapper"><![CDATA[
  vec3 reinhardTM(vec3 inputColor, float exposure){
      vec3 intermediate = inputColor *exposure;
      intermediate /= (1.0+intermediate);
      return pow(intermediate, v3OneOverGamma);
  }
]]></snippet>


<snippet name="HSVColorSpace"><![CDATA[
//based on http://gamedev.stackexchange.com/a/59808
// Hue in range [0,1] instead of 360°
vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
]]></snippet>

<snippet name="atmosphereUniformsConstantsVaryings"><![CDATA[

  //Light
  uniform vec3 v3LightDir;      // The direction vector to the light source
  uniform vec3 v3InvWavelength; // 1 / pow(wavelength, 4) for the red, green, and blue channels
  uniform vec3 v3InvWavelengthScaled; //v3InvWavelength * fKr4PI + fKm4PI

  //Radii
  uniform vec4 v4Radii; // inner, inner^2, outer, outer^2,

  //Atmosphere
  const float fKrESun = 0.075;        // Kr * ESun = 0.005 * 15.0
  const float fKmESun = 0.015;        // Km * ESun = 0.005 * 15
  //uniform float fScale;         // 1 / (fOuterRadius - fInnerRadius)
  //uniform float fScaleDepth;    // The scale depth (i.e. the altitude at which the atmosphere's average density is found)
  //uniform float fScaleOverScaleDepth; // fScale / fScaleDepth
  //uniform float fOneOverScaleDepth; // 1.0 / fScaleDepth

  //uniform float fScaleDepthBlue;    // The scale depth (i.e. the altitude at which the atmosphere's average density is found)
  //uniform float fScaleOverScaleDepthBlue; // fScale / fScaleDepth
  //uniform float fOneOverScaleDepthBlue; // 1.0 / fScaleDepth

  uniform vec4 v4AtmosParams1; //(fScale,fScaleDepth,fScaleOverScaleDepth,fOneOverScaleDepth)
  uniform vec4 v4AtmosParams2; //(g,fScaleDepthBlue,fScaleOverScaleDepthBlue,fOneOverScaleDepthBlue)
#ifndef HAZE
  uniform vec4 v4AtmosParams3; //(g2,fMiePhaseCoefficients,fLowerAlphaBlendBound,fOneOverOuterRadiusMinusAlphaBlendBound)
#endif

  //Camera
  uniform vec3 v3CameraPos;     // The camera's current position
  //uniform float fCameraHeight;  // The camera's current height
  //uniform float fCameraHeight2; // fCameraHeight^2
  //uniform float fC; //fCameraHeight2 - fOuterRadius2; // C = ||o-c||^2 - r^2
  //uniform float fCSur; //fCameraHeight2 - (fInnerRadius2 - 63756370000.0); // C = ||o-c||^2 - r^2
  uniform vec4 v4SphereComp; //The camera's current height, CameraHeight^2,fC,fCSur
  uniform vec2 nearFar;

  //Camera HDR
#ifdef HAZE
  const float fExposure = 1.5;
#else
  const float fExposure = 2.0;
#endif

#ifdef HAZE
  //Depth texture
  uniform sampler2D tDepth;
#endif

  //Testing variables
  uniform float showTest;

  //Varyings
  varying vec3 v3EyeDir;
  varying vec3 v3WorldRay;
  varying vec2 vtc;

  //Loop constants for integral approximation
  const float fSamples = 5.0;
  const int maxSamples = 5;
]]></snippet>


<snippet name="atmospherePrecomputation"><![CDATA[
    float fInnerRadius = v4Radii[0];   // The inner (planetary) radius
    float fInnerRadius2 = v4Radii[1];  // fInnerRadius^2
    float fOuterRadius = v4Radii[2];   // The outer (atmosphere) radius
    float fOuterRadius2 = v4Radii[3];  // fOuterRadius^2

    float fCameraHeight = v4SphereComp[0];
    float fCameraHeight2 = v4SphereComp[1];
    float fC = v4SphereComp[2];
    float fCSur = v4SphereComp[3];

#ifdef PLANAR
    vec3 cameraPosition = vec3(0.0,0.0,fCameraHeight);
#else
    vec3 cameraPosition = v3CameraPos;
#endif

    //Debug variables
    vec3 test = vec3(0.0,0.0,0.0);

    //Obtain ray from Camera
    vec3 worldSpaceRay = normalize(v3WorldRay);

    //Compute Atmosphere intersection; i.e. ray/sphere intersection
    float B = 2.0 * dot(cameraPosition, worldSpaceRay); // B = 2(l * (o-c))
    float det = B*B - 4.0 * fC; // det = B^2 - 4.0* C

    //idealized sphere intersection to discard early some pixels
    float detSur = B*B - 4.0 * fCSur; // det = B^2 - 4.0* C

]]></snippet>


<snippet name="atmosphereDiscardPixels"><![CDATA[
      bool continueComputation = true;
#ifdef HAZE
      // only use red channel from depth texture.
      // see 'Issues' at https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture
      float depthSample = texture2D(tDepth, vtc).r;

      float zNear = nearFar[0];
      float zFar = nearFar[1];

      // http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real
      float zNorm = 2.0 * depthSample - 1.0;
      float linDepth = 2.0 * zNear * zFar /
        (zFar + zNear - zNorm * (zFar - zNear));

      float nearSurfaceT;
      if (detSur>0.0){
        nearSurfaceT = 0.5 *(-B - sqrt(detSur));
      }

      float rayEndT;

      // find intersections with ground, but only between the near and far
      // clipping planes.
      if (depthSample < 1.0 && depthSample > 0.0) {
        vec3 cameraSpaceRay = normalize(v3EyeDir);
        cameraSpaceRay /= cameraSpaceRay.z;
        cameraSpaceRay *= linDepth;
#ifndef PLANAR
        if((fCameraHeight-fInnerRadius)>8000000.0 && detSur>0.0){
          rayEndT = nearSurfaceT;
        } else  if ((fCameraHeight-fInnerRadius)>2000000.0 && detSur>0.0){
          rayEndT = mix(length(cameraSpaceRay),nearSurfaceT,((fCameraHeight-fInnerRadius)-2000000.0)/6000000.0);
        } else {
          rayEndT = length(cameraSpaceRay);
        }
#else
        rayEndT = length(cameraSpaceRay);
#endif
      } else {
        continueComputation = false;
      }
#ifdef PLANAR
      if (16500.0+ fInnerRadius < fCameraHeight){
        continueComputation = false;
      }
#endif
#else
      if (detSur>0.0){
        float nearSurfaceT = 0.5 *(-B - sqrt(detSur));
        if (nearSurfaceT > 0.0){
          continueComputation = false;
        }
      }
#endif

]]></snippet>

<snippet name="atmosphereUnpackAddUniforms"><![CDATA[
        float fScale = v4AtmosParams1.x;
        vec2 v2ScaleDepth = vec2(v4AtmosParams1.y,v4AtmosParams2.y);//fScaleDepth, fScaleDepthBlue
        vec2 v2ScaleOverScaleDepth = vec2(v4AtmosParams1.z,v4AtmosParams2.z);//fScaleOverScaleDepth, fScaleOverScaleDepthBlue
        vec2 v2OneOverScaleDepth = vec2(v4AtmosParams1.w,v4AtmosParams2.w);//fOneOverScaleDepth, fOneOverScaleDepthBlue

#ifndef HAZE
        float g = v4AtmosParams2.x;
        float g2 = v4AtmosParams3.x;
        float fMiePhaseCoefficients = v4AtmosParams3.y;
        float fLowerAlphaBlendBound = v4AtmosParams3.z;
        float fOneOverOuterRadiusMinusAlphaBlendBound = v4AtmosParams3.w;
#endif
]]></snippet>


<snippet name="atmosphereComputeRayAndLoopSetup"><![CDATA[
        float rayStartT = 0.5 *(-B - sqrt(det)); //near intersection with atmosphere
#ifdef HAZE
        float nearT = abs(rayStartT);
        float farT = abs(rayEndT);
#else
        float rayEndT = 0.5 *(-B + sqrt(det)); //far intersection with atmosphere

#endif

        float fDistance;//calculate its scattering offset
        // Calculate the ray's starting position
        if (rayStartT < 0.0)
        { //ray starts from camera to far
          rayStartT = 0.0;
#ifndef HAZE
          fDistance = fScale*(fInnerRadius - fCameraHeight);
#endif
        }
#ifndef HAZE
        else
        {//outside atmosphere
          fDistance = -1.0;
        }
#endif

        // Initialize the scattering loop variables
        vec3 v3Start = cameraPosition + worldSpaceRay * rayStartT;

#ifdef HAZE
        vec3 v3End = cameraPosition + worldSpaceRay * rayEndT;

        float fEndLength = length(v3End);
        float fLocalCameraHeight = length(v3Start);

        //computed for the original end point to get consistent light angles after possible inversions
        float fLightAngle = dot(v3LightDir, v3End) / fEndLength;

        if (nearT > farT)
        {
          if (fLocalCameraHeight < fEndLength)
          {
            //Switch positive slopes for flipped rays
            v3End = cameraPosition + worldSpaceRay * rayStartT;
            v3Start = cameraPosition + worldSpaceRay * rayEndT;
            worldSpaceRay *= -1.0;
            fEndLength = length(v3End);
            fLocalCameraHeight = length(v3Start);
          }
          else if (fLocalCameraHeight == fEndLength)
          {// create minuscule fake slope for integration if the slope is zero
            fLocalCameraHeight += 1.0; //BUGFIX, if the height of camera and ground is equal the equation breaks, add fake meter to camera height to get
            //slope for the camera function
          }
        }

        //Calculate its scattering offset
        // Assumes camera constrains of WSV 3.8
        float fCameraDepth;
        float fCameraDepthBlue;
        if (fLocalCameraHeight > fOuterRadius)
        {
          fDistance = fInnerRadius - fOuterRadius;
        } else
        {//outside atmosphere
          fDistance = fEndLength - fLocalCameraHeight;
        }

#endif
        vec2 v2OpticalStartDepth = exp(fDistance * v2OneOverScaleDepth);

        float fRayLength = rayEndT - rayStartT;
        float fSampleLength = fRayLength / fSamples;
        float fScaledLength = fSampleLength * fScale;
        vec3 v3SampleRay = worldSpaceRay * fSampleLength;
        vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;

#ifdef HAZE
        float fCameraAngle = dot(-worldSpaceRay, v3End) / fEndLength;
        float fScaleCameraAngle = scale(fCameraAngle);
        vec2 v2CameraOffset = fScaleCameraAngle*v2OpticalStartDepth;

        float scaledValues = scale(fLightAngle) + fScaleCameraAngle;
        vec2 v2ScaledValuesDepth = scaledValues * v2ScaleDepth;
#else
        float fCameraAngle = dot(worldSpaceRay, v3Start / length(v3Start));
        float angleMultiplier = fCameraAngle>0.0?fCameraAngle:0.0;

        float fScaleCameraAngle = scale(fCameraAngle);
        vec2 v2CameraOffset = fScaleCameraAngle*v2OpticalStartDepth * v2ScaleDepth;
#endif

        //Loop variables
        vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);
        vec3 v3FrontColorBlue = vec3(0.0, 0.0, 0.0);
        vec3 v3Attenuate= vec3(0.0, 0.0, 0.0);
        vec3 v3AttenuateBlue = vec3(0.0, 0.0, 0.0);
]]></snippet>


<snippet name="atmosphereComputeSampleContribution"><![CDATA[
          float fHeight = length(v3SamplePoint);
          vec2 v2Depth = exp(v2ScaleOverScaleDepth * (fInnerRadius - fHeight));
#ifdef HAZE
          vec2 v2Scatter = v2Depth*v2ScaledValuesDepth-v2CameraOffset;
#else
          float fLightAngle = dot(v3LightDir, v3SamplePoint) / fHeight;
          float fCameraAngle = dot(worldSpaceRay, v3SamplePoint) / fHeight;
          float fTempScaledValues = scale(fLightAngle) - scale(fCameraAngle);
          vec2 v2Scatter = v2CameraOffset + fTempScaledValues*v2Depth* v2ScaleDepth;
#endif
          v3Attenuate = exp(-v2Scatter.x * v3InvWavelengthScaled);
          v3AttenuateBlue = exp(-v2Scatter.y * v3InvWavelengthScaled);

          v3FrontColor += v3Attenuate * v2Depth.x;
          v3FrontColorBlue += v3AttenuateBlue * v2Depth.y;

          v3SamplePoint += v3SampleRay;
]]></snippet>


<snippet name="atmosphereComputeHDRColors"><![CDATA[
        //Phase computation
        //clamp to avoid numerical instability at fCos == -1.0 (and close values) to display fake sun
        float fCos = clamp(dot(v3LightDir, -worldSpaceRay ),-0.9999999,1.0);
        float fOnePlusCos2 = fCos*fCos + 1.0;
#ifdef HAZE
        // Finally, scale the Rayleigh colors and set up the varying variables for the pixel shader
        vec3 colorCoefficients = (fScaledLength* 0.75 * fOnePlusCos2)*(fKrESun*v3InvWavelength+fKmESun);

        //Scaled Length is only applied afterwards to save multiplications
        vec3 v3Color = colorCoefficients *v3FrontColor;
        vec3 v3ColorBlue = colorCoefficients *v3FrontColorBlue;
#else
        vec3 v3RayleighCoefficients = (fScaledLength*0.75 * fOnePlusCos2*fKrESun)*v3InvWavelength;
        float fMieCoefficients = fScaledLength*fKmESun * fMiePhaseCoefficients * fOnePlusCos2 / pow(1.0 + g2 - 2.0*g*fCos, 1.5);

        // Calculate the attenuation factor for the ground
        vec3 v3Color = v3RayleighCoefficients * v3FrontColor + fMieCoefficients * v3FrontColor;
        vec3 v3ColorBlue = v3RayleighCoefficients * v3FrontColorBlue + fMieCoefficients * v3FrontColorBlue;
#endif
]]></snippet>


<snippet name="atmosphereComputePixelColor"><![CDATA[


        //HDR to LDR conversion
        vec3 ldrBlue = expTM(v3ColorBlue,2.0*fExposure);
        vec3 ldrRed = expTM(v3Color,fExposure);

        //mix reddish and blueish atmosphere
        vec3 LDR = mix(ldrBlue,ldrRed,0.2);
#ifdef HAZE
        LDR *= (1.0-fCameraAngle);
        vec3 hsv = rgb2hsv(LDR);
        hsv.y = clamp(hsv.y*1.5,0.0,1.0);//boost haze saturation by 50%
        LDR = hsv2rgb(hsv);
        vec3 finalColor = LDR;
        // when rendering we specify the blend functions such that
        // newDestColor = oldDestColor*(1.0-finalColor) + finalColor
#else
        //reinhard tonemapper for looking upwards
        vec3 ldrReinhard = reinhardTM(v3Color,fExposure);
        LDR += angleMultiplier*ldrReinhard;

        //height dependent parameter to smooth out reddish atmosphere
        float side = (rayEndT+rayStartT)*0.5;
        float atmoHeight = sqrt(fCameraHeight2 - side*side);
        float h2 = clamp(1.0-(atmoHeight-fLowerAlphaBlendBound)/(fOuterRadius-fLowerAlphaBlendBound),0.0,1.0);

        vec3 finalColor = LDR*h2;
        vec3 hsv = rgb2hsv(finalColor);
        hsv.y = clamp(hsv.y*1.5,0.0,1.0);//boost sky saturation by 50%
        finalColor = hsv2rgb(hsv);
#endif
#ifdef PLANAR
#ifndef HAZE
        float alpha = clamp(fCameraHeight-fInnerRadius,7000.0,30000.0);
        alpha = alpha / (30000.0-7000.0);
        gl_FragColor = vec4(finalColor, 1.0-alpha);
#else
        float alpha = clamp(fCameraHeight-fInnerRadius,0.0,16500.0);
        alpha = alpha / (16500.0-0.0);
        gl_FragColor = vec4(finalColor, 1.0-alpha);
#endif
#else
#ifndef HAZE
        float alpha = clamp(fCameraHeight-fInnerRadius,7000.0,30000.0);
        alpha = alpha / (30000.0-7000.0);
        float atmosStrength = clamp((length(ldrRed)-0.05)*1.05,0.0,1.0);
        gl_FragColor = vec4(finalColor, atmosStrength*clamp(1.0-(atmoHeight-fInnerRadius)/(fOuterRadius-fInnerRadius),0.0,1.0));
#else
        gl_FragColor = vec4(finalColor, 1.0);
#endif
#endif


]]></snippet>

<!--Fragment Shader for Atmosphere-->
<snippet name="fsRealisticAtmosphere"><![CDATA[

  precision mediump  float;

$atmosphereUniformsConstantsVaryings

$atmosphereScaleFunction

  //Conversion implementation found in util.xml
$rgba2float


$toneMapperConstants
$exponentialToneMapper
#ifndef HAZE
$reinhardToneMapper
#endif

$HSVColorSpace

  void main()
  {

    $atmospherePrecomputation

    //Inside Atmosphere
    if (det >= 0.0){

      $atmosphereDiscardPixels

      if(continueComputation){

        $atmosphereUnpackAddUniforms

        $atmosphereComputeRayAndLoopSetup

        // Now loop through the sample rays
        for(int i=0; i<maxSamples; i++)
        {
          $atmosphereComputeSampleContribution
        }

        $atmosphereComputeHDRColors

        $atmosphereComputePixelColor

        //Debug variable overlay
        if(showTest>0.0){
          gl_FragColor = vec4(test,1.0);
        }

      } else {//Not on surface
        gl_FragColor = vec4(0.0);
      }
    } else {//Outside Atmosphere
      gl_FragColor = vec4(0.0);
    }
  }
]]></snippet>

</snippets>
