<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<snippet name="vertexShaderWater"><![CDATA[
	uniform mat4 proj;
	uniform mat4 view;
	uniform mat4 model;
	attribute vec3 $position;
	varying vec3 vpos;

	void main(void) {
		vpos = (model * vec4($position, 1.0)).xyz;
		gl_Position = proj * view * vec4(vpos, 1.0);
	}
]]></snippet>

<snippet name="fragmentShaderWater"><![CDATA[
	precision mediump float;

	uniform vec3 color;
	uniform float scale;
	uniform float speed;

	uniform vec4 lightAmbient;
	uniform vec4 lightDiffuse;
	uniform vec4 lightSpecular;
	uniform vec3 lightDirection;

	uniform vec3 camPos;

	uniform sampler2D noiseTex;
	uniform sampler2D reflTex;

	uniform sampler2D depthTex;
	uniform int shadowMapNum;
	uniform vec4 shadowMapDistance;
	uniform mat4 shadowMapMatrix[4];
	uniform float depthHalfPixelSz;

	varying vec3 vpos;

	$evalShadow

	$normal2envTC

	// TODO optimize?
	vec2 rotate(vec2 pos, float angle) {
		float c = cos(angle);
		float s = sin(angle);
		return vec2(c * pos.x - s * pos.y, s * pos.x + c * pos.y);
	}

	float compDelta(vec2 pos) {
		const float PI_THIRD = 1.04719755;

		float result = .0;
		float s = 1.0;
		for (int i = 0; i < 6; ++i) {
			vec2 tc = pos / (20.0 * s);
			tc += rotate(vec2(1.0 + speed, .0), PI_THIRD * float(i));
			result += s * texture2D(noiseTex, tc).r;
			s *= 1.5;
		}
		return result * scale * .2;
	}

	void main() {
		vec3 viewVec = normalize(camPos - vpos);

		float d0 = compDelta(vpos.xz);
		float dx = compDelta(vpos.xz + vec2(.05, .0));
		float dz = compDelta(vpos.xz + vec2(.0, .05));

		vec3 normal = normalize(vec3(d0 - dx, .05, d0 - dz));

		float fresnel = clamp(1.0 - 1.25 * dot(viewVec, normal), .0, 1.0);

		float shadow = 0.0;
		if (halfPxSz >= .0) {
			shadow = evalShadow(vpos, 1.0 / gl_FragCoord.w, depthTex, shadowMapNum, shadowMapDistance, shadowMapMatrix, depthHalfPixelSz);
		}

		vec3 reflDir = reflect(-viewVec, normal);
		if (reflDir.y < .02) reflDir.y = 0.04 - reflDir.y;

		vec3 reflCol = texture2D(reflTex, normal2envTC(reflDir)).rgb * lightAmbient.rgb*lightSpecular.w;
		reflCol *= .5 + max(lightDirection.y, .0) * .5; // ?	+
		vec3 waterColor = color * (lightAmbient.rgb * lightAmbient.w + (1.0 - shadow) * max(lightDirection.y, .0) * lightDiffuse.rgb * lightDiffuse.w);
		vec3 finalColor = mix(waterColor, reflCol, .15 + .6 * fresnel);

		vec3 spec = pow(max(dot(reflDir, lightDirection), .001), 80.0) * lightSpecular.rgb * lightSpecular.w * 2.0;
		finalColor += (1.0 - shadow) * lightDiffuse.w * spec;

		gl_FragColor = vec4(finalColor, 1.0);
	}
]]></snippet>

</snippets>