<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<snippet name="matchPixelCenter"><![CDATA[
	vec4 matchPixelCenter(vec4 clipCoord, vec2 widthHeight) {
		vec2 xy = vec2(.500123) + .5 * clipCoord.xy / clipCoord.w;
		vec2 ij = floor(xy * widthHeight);
		vec2 pixelSz = vec2(1.0) / widthHeight;
		vec2 result = (((vec2(.5) + ij) * pixelSz) * 2.0 - vec2(1.0)) * clipCoord.w;
		return vec4(result.x, result.y, clipCoord.z, clipCoord.w);
	}
]]></snippet>

<snippet name="float2rgba"><![CDATA[
	vec4 float2rgba(const in float v) {
		vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * v;
		enc = fract(enc);
		enc -= enc.yzww * vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 0.0);
		return enc;
	}
]]></snippet>

<snippet name="rgba2float"><![CDATA[
	float rgba2float(vec4 rgba) {
		return dot(rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/16581375.0));
	}
]]></snippet>

<snippet name="calcFragDepth"><![CDATA[
	#extension GL_OES_standard_derivatives : enable

	float calcFragDepth(const in float depth) {
		//calc polygon offset
		const float SLOPE_SCALE = 2.0;
		const float BIAS = 2.0 * .000015259;		// 1 / (2^16 - 1)
		float m = max(abs(dFdx(depth)), abs(dFdy(depth)));
		float result = depth + SLOPE_SCALE * m + BIAS;
		return clamp(result, .0, .999999);
	}
]]></snippet>

<snippet name="evalShadow"><![CDATA[
	$rgba2float

	// "matrix" parameter used to have const qualifier as well, but IE11 couldn't deal with it at time of writing.
	// once IE11 is fine with it, const should probably be re-introduced
	float evalShadow(const in vec3 vpos, const in float depth, const in sampler2D depthTex, const int num, const in vec4 distance, in mat4 matrix[4], const in float halfPxSz) {
		//choose correct cascade
		int i = depth < distance[1] ? 0 : depth < distance[2] ? 1 : depth < distance[3] ? 2 : 3;

		if (i >= num) return .0;

		mat4 mat = i == 0 ? matrix[0] : i == 1 ? matrix[1] : i == 2 ? matrix[2] : matrix[3];

		vec4 lv = mat * vec4(vpos, 1.0);
		lv.xy /= lv.w;

		//vertex completely outside? -> no shadow
		vec3 lvpos = .5 * lv.xyz + vec3(.5);
		if (lvpos.z >= 1.0) return .0;
		if (lvpos.x < .0 || lvpos.x > 1.0 || lvpos.y < .0 || lvpos.y > 1.0) return .0;

		//calc coord in cascade texture
		vec2 uv = vec2(float(i - 2 * (i / 2)) *.5, float(i / 2) * .5) + .5 * lvpos.xy;

		float texSize = .5 / halfPxSz;

		//filter, offset by half pixels
		vec2 st = fract((vec2(halfPxSz) + uv) * texSize);

		float s00 = rgba2float(texture2D(depthTex, uv + vec2(-halfPxSz, -halfPxSz))) < lvpos.z ? 1.0 : .0;
		float s10 = rgba2float(texture2D(depthTex, uv + vec2(halfPxSz, -halfPxSz))) < lvpos.z ? 1.0 : .0;
		float s11 = rgba2float(texture2D(depthTex, uv + vec2(halfPxSz, halfPxSz))) < lvpos.z ? 1.0 : .0;
		float s01 = rgba2float(texture2D(depthTex, uv + vec2(-halfPxSz, halfPxSz))) < lvpos.z ? 1.0 : .0;

		return mix(mix(s00, s10, st.x), mix(s01, s11, st.x), st.y);
	}
]]></snippet>

<snippet name="normal2envTC"><![CDATA[
	vec2 normal2envTC(vec3 normal) {
		float v = .5 + .5 * asin(normal.y) * 0.63661977;
		float u = .5 - .5 * atan(normal.z, normal.x) * 0.31830988;
		return vec2(u, v);
	}
]]></snippet>

<snippet name="vertexShaderShowDepth"><![CDATA[
	uniform mat4 proj;
	attribute vec2 $position;
	attribute vec2 $uv0;
	varying vec2 vtc;

	void main(void) {
		gl_Position = proj * vec4($position.x, $position.y, .0, 1.0);
		vtc = $uv0;
	}
]]></snippet>

	<snippet name="fragmentShaderShowDepth"><![CDATA[
	precision mediump float;

	uniform sampler2D depthTex;
	varying vec2 vtc;
	$rgba2float
	void main() {
	//	gl_FragColor = vec4(vec3(texture2D(depthTex, vtc).a), 1.0);
		gl_FragColor = vec4(rgba2float(texture2D(depthTex, vtc)));
	//	gl_FragColor = texture2D(depthTex, vtc);
	}
]]></snippet>

<snippet name="vsUVQuad"><![CDATA[
	attribute vec2 $position;
	varying vec2 uv;

	void main(void) {
		gl_Position = vec4($position.x, $position.y, .0, 1.0);
		uv = $position * .5 + vec2(.5);
	}
]]></snippet>

<snippet name="toScreenCoords"><![CDATA[
	vec4 toScreenCoords(vec3 vertex) {
		vec4 vClipSpace = proj * view * vec4((model * vec4(vertex, 1.0)).xyz, 1.0);
		vClipSpace.xy *= screenSize;
		return vClipSpace/abs(vClipSpace.w);
	}
]]></snippet>

<snippet name="vvUniforms"><![CDATA[
#if defined(VV_SIZE) || defined(VV_ROTATION)
	#define VV_CUSTOM_MODEL_MATRIX
#endif

#if defined(VV_SIZE)
	uniform vec3 vvSizeMinSize;
	uniform vec3 vvSizeMaxSize;
	uniform vec3 vvSizeMinDataValue;
	uniform vec3 vvSizeMaxDataValue;
#elif defined(VV_CUSTOM_MODEL_MATRIX)
	uniform vec3 vvSizeValue;
#endif

#if defined(VV_ROTATION)
  #error Rotation not implemented
#elif defined(VV_CUSTOM_MODEL_MATRIX)
	uniform mat4 vvRotationValue;
#endif

#ifdef VV_CUSTOM_MODEL_MATRIX
	uniform vec3 vvAnchorValue;
#endif

#ifdef VV_COLOR
	#define VV_COLOR_N 8
	uniform float vvColorValues[VV_COLOR_N];
	uniform vec4 vvColorColors[VV_COLOR_N];
#endif

]]></snippet>

<snippet name="vvFunctions"><![CDATA[
// Evaluation of size
#if defined(VV_SIZE)
	vec3 vvGetScale(vec4 featureAttribute) {
		vec3 f = (featureAttribute.xxx - vvSizeMinDataValue) / (vvSizeMaxDataValue - vvSizeMinDataValue);
		return vvSizeMinSize + clamp(f, 0.0, 1.0) * (vvSizeMaxSize - vvSizeMinSize);
	}
#elif defined(VV_CUSTOM_MODEL_MATRIX)
	vec3 vvGetScale(vec4 featureAttribute) {
		return vvSizeValue;
	}
#endif

// Evaluation of rotation
#if defined(VV_ROTATION)
	#error Rotation not implemented
#elif defined(VV_CUSTOM_MODEL_MATRIX)
	mat4 vvGetRotation(vec4 featureAttribute) {
		return vvRotationValue;
	}
#endif

// Applying the model matrix
#ifdef VV_CUSTOM_MODEL_MATRIX
	vec4 vvTransformPosition(vec3 position, vec4 featureAttribute) {
		return vvGetRotation(featureAttribute) * vec4(vvGetScale(featureAttribute) * (position + vvAnchorValue), 1.0);
	}

	vec4 vvTransformNormal(vec3 normal, vec4 featureAttribute) {
		// Normal transform is the inverse transpose of model transform
		return vvGetRotation(featureAttribute) * vec4(normal / vvGetScale(featureAttribute), 1.0);
	}
#endif

#ifdef VV_COLOR
	vec4 vvGetColor(vec4 featureAttribute, float values[VV_COLOR_N], vec4 colors[VV_COLOR_N]) {
		float value = featureAttribute.x;
		if (value <= values[0]) {
			return colors[0];
		}

		for (int i = 1; i < VV_COLOR_N; ++i) {
			if (values[i] >= value) {
				float f = (value - values[i-1]) / (values[i] - values[i-1]);
				return mix(colors[i-1], colors[i], f);
			}
		}

		return colors[VV_COLOR_N - 1];
	}
#endif
]]></snippet>

</snippets>
