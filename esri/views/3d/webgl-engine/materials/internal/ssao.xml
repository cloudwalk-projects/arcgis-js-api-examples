<?xml version="1.0" encoding="UTF-8"?>

<snippets>

	<snippet name="createFsSSAOSrc"><![CDATA[

	precision mediump float;

	uniform sampler2D rnm;
	uniform sampler2D normalMap;
	uniform sampler2D depthMap;
	uniform float		ssaoAtt;
	uniform vec2		rnmScale;
	uniform float		radius;
	uniform vec2		nearFar;
	uniform vec3		pSphere[64];

	varying vec2		uv;

	const	int		 samples =	$samples;
	const	float		strength = .07;
	const	float		falloff = .000002;

	$rgba2float
	void main(void) {
		vec3 fres = normalize((texture2D(rnm, uv * rnmScale).xyz * 2.0) - vec3(1.0));
		float currentPixelDepth = rgba2float(texture2D(depthMap, uv));
		vec3 ep = vec3(uv.xy, currentPixelDepth);
		vec3 norm = vec3(-1.0) + 2.0 * texture2D(normalMap, uv).xyz;
		float bl = .0;
		float f = mix(nearFar.x, nearFar.y, currentPixelDepth) / nearFar.x;
		float radD = radius / f;
		radD = min(radD, .5);
		float depthDifference;
		vec3 ray;

		for(int i = 0; i < samples; ++i) {
			ray = radD*reflect(pSphere[i], fres);
			vec2 tc = ep.xy + sign(dot(ray, norm) ) * ray.xy;
			if (tc.x >= .0 && tc.y >= .0 && tc.x <= 1.0 && tc.y <= 1.0) {
				float occluderDepth = rgba2float(texture2D(depthMap, tc));
				vec3 occluderNormal = vec3(-1.0) + 2.0 * texture2D(normalMap, tc).xyz;
				depthDifference = currentPixelDepth - occluderDepth;
				bl += step(falloff, depthDifference) * (1.0 - dot(occluderNormal, norm)) * (1.0 - smoothstep(falloff, strength, depthDifference));
			};
		}

		float ao = 1.0 + bl * (-1.38 / float(samples)) * ssaoAtt;
		gl_FragColor.a = ao;
	}
]]></snippet>

	<snippet name="getDepthLinear"><![CDATA[
	float getDepthLinear(vec2 ssC) {
		return -(rgba2float(texture2D(depthMap, ssC))*(nearFar[1] - nearFar[0])+nearFar[0]);
	}
]]></snippet>

<snippet name="createFsSSAOSrcObscurance"><![CDATA[
	precision highp float;

	uniform mat4 projMatrixInv;

	uniform sampler2D normalMap;
	uniform sampler2D depthMap;

	uniform float     intensity;

	uniform float projScale;
	uniform float     radius;
	uniform vec2      nearFar;

	uniform vec4      projInfo;

	const	int		 samples =	$samples;

	uniform vec2	  screenDimensions;

	//noise texture lookup could be replaced with hash function if WebGL gets XOR functionality
	uniform vec3		pSphere[64]; //tap position
	uniform vec2		rnmScale;
	uniform sampler2D rnm; //noise texture

	//set z scaling, used to prevent division in ortho mode
	uniform vec2 zScale;

	varying vec2  uv;
	varying vec4  camPos;

	$rgba2float
	$getDepthLinear

	/** Returns a unit vector and a screen-space radius for the tap on a unit disk (the caller should scale by the actual disk radius) */
	/*uniform float numSpiralTurns;
	vec2 tapLocation(int sampleNumber, float spinAngle, out float ssR){
		// Radius relative to ssR
		float alpha = (float(sampleNumber) + 0.5) * (1.0 / float(samples));
		float angle = alpha * (numSpiralTurns * 6.28) + spinAngle;

		ssR = alpha;
		return vec2(cos(angle), sin(angle));
	}*/


	float radius2 = radius * radius;

	float fallOffFunction(float vv, float vn, float bias) {
		// A: From the HPG12 paper
		// Note large epsilon to avoid overdarkening within cracks
		// return float(vv < radius2) * max((vn - bias) / (epsilon + vv), 0.0) * radius2 * 0.6;

		// B: Smoother transition to zero (lowers contrast, smoothing out corners). [Recommended]
		float f = max(radius2 - vv, 0.0); return f * f * f * max(vn-bias, 0.0);

		// C: Medium contrast (which looks better at high radii), no division.  Note that the
		// contribution still falls off with radius^2, but we've adjusted the rate in a way that is
		// more computationally efficient and happens to be aesthetically pleasing.
		// return 4.0 * max(1.0 - vv * invRadius2, 0.0) * max(vn - bias, 0.0);

		// D: Low contrast, no division operation
		// return 2.0 * float(vv < radius * radius) * max(vn - bias, 0.0);
	}


	/** Compute the occlusion due to sample point \a Q about camera-space point \a C with unit normal \a n_C */
	float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {
		vec3 v = Q - C;
		float vv = dot(v, v);
		float vn = dot(normalize(v), n_C);
		return fallOffFunction(vv, vn, 0.1);
	}


	/** Reconstruct camera-space P.xyz from screen-space S = (x, y) in
		pixels and camera-space z < 0.  Assumes that the upper-left pixel center
		is at (0.5, 0.5) [but that need not be the location at which the sample tap
		was placed!]

		Costs 3 MADD.  Error is on the order of 10^3 at the far plane, partly due to z precision.
	  */
	vec3 reconstructCSPosition(vec2 S, float z) {
		return vec3(( (S.xy) * projInfo.xy + projInfo.zw)*(z*zScale.x+zScale.y), z);
	}

	void main(void)
	{

		//Hash function used in the HPG12 AlchemyAO paper
		//Not supported in WebGL -> using texture lookup as in old SSAO shader instead
		//ivec2 ssC = ivec2(gl_FragCoord.xy);
		//float randomPatternRotationAngle = float((3 * ssC.x ^ ssC.y + ssC.x * ssC.y) * 10);
		vec3 fres = normalize((texture2D(rnm, uv * rnmScale).xyz * 2.0) - vec3(1.0));

	   float currentPixelDepth = getDepthLinear(uv);

	   if (-currentPixelDepth>nearFar.y || -currentPixelDepth<nearFar.x) {
		gl_FragColor = vec4(0);
		return;
	   }

	   vec3 currentPixelPos = reconstructCSPosition(gl_FragCoord.xy,currentPixelDepth);

	   // get the normal of current fragment
	   vec4 norm4 = texture2D(normalMap, uv);
	   vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;
	   bool isTerrain = norm4.w<0.5;

	   float sum = .0;

	   vec4 occluderFragment;
	   vec3 ray;

	   vec3 tapPixelPos;

		//TODO the factor 2.0 should not be necessary, but makes ssao much nicer. bug or deviation from CE somewhere else?
	   float ps = projScale/(2.0*currentPixelPos.z*zScale.x+zScale.y);

	   for(int i = 0; i < samples; ++i)
	   {
		  // get a vector (randomized inside of a sphere with radius 1.0) from a texture and reflect it
		  //float ssR;
		  //vec2 unitOffset = tapLocation(i, randomPatternRotationAngle, ssR);
		  // get the depth of the occluder fragment
		  //vec2 offset = vec2(-unitOffset*radius*ssR*ps);

		  vec2 unitOffset = reflect(pSphere[i], fres).xy;
		  vec2 offset = vec2(-unitOffset*radius*ps);


		  //don't use current or very nearby samples
		  if ( abs(offset.x)<2.0 || abs(offset.y)<2.0) continue;


		  vec2 tc = vec2(gl_FragCoord.xy + offset);
		  if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenDimensions.x || tc.y > screenDimensions.y) continue;
		  vec2 tcTap = tc/screenDimensions;
		  float occluderFragmentDepth = getDepthLinear(tcTap);

		  if (isTerrain) {
		  	bool isTerrainTap = texture2D(normalMap, tcTap).w<0.5;
		  	if (isTerrainTap)
		  		continue;
		  }

		  tapPixelPos = reconstructCSPosition(tc, occluderFragmentDepth);

		  sum+= aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);
	   }

	   // output the result

		float A = max(1.0-sum*intensity/float(samples),0.0);

		// Anti-tone map to reduce contrast and drag dark region farther
		// (x^0.2 + 1.2 * x^4)/2.2
		A = (pow(A, 0.2) + 1.2 * A*A*A*A) / 2.2;


	   //gl_FragColor = vec4(norm/2.0+0.5, 1.0);
	   //gl_FragColor = vec4(-currentPixelDepth/1000.0);
	   //gl_FragColor = vec4(tapPixelPos.x/100.0);
	   gl_FragColor = vec4(A);


	}
]]></snippet>

<snippet name="fsBlurEdgeAware"><![CDATA[
	precision highp float;

	uniform sampler2D normalMap;
	uniform sampler2D depthMap;
	uniform sampler2D tex;


	uniform vec2 blurSize;


	uniform float g_BlurFalloff;
	uniform float projScale;


	varying vec2 uv;

	uniform vec2		nearFar;

	//set z scaling, used to prevent division in ortho mode
	uniform vec2 zScale;

	$rgba2float
	$getDepthLinear

	float BlurFunction(vec2 uv, float r, float center_d, inout float w_total, float sharpness)
	{
		float c = texture2D(tex, uv).r;
		float d = getDepthLinear(uv);

		float ddiff = d - center_d;

		float w = exp(-r*r*g_BlurFalloff - ddiff*ddiff*sharpness);

		w_total += w;

		return w*c;
	}

	void main(void)
	{

		float b = 0.0;
		float w_total = 0.0;

		float center_d =  getDepthLinear(uv);

		float sharpness = -0.05*projScale/(center_d*zScale.x+zScale.y);
		for (int r = -RADIUS; r <= RADIUS; ++r)
		{
			float rf = float(r);
			vec2 uvOffset = uv + rf*blurSize;
			b += BlurFunction(uvOffset, rf, center_d, w_total, sharpness);
		}

		gl_FragColor = vec4(b/w_total);
	}
]]></snippet>


	<snippet name="fsBlurSrc0"><![CDATA[
	precision highp float;

	uniform sampler2D tex;
	uniform float blurSize;
	varying vec2 uv;

	void main() {
		int rad = RADIUS - 1;

		vec4 sum = vec4(0.0);
		for (int k = -RADIUS; k <= RADIUS; ++k) { 		// NOTE for-variable-init must be a const expression
			float fi = float(k);
]]></snippet>

	<snippet name="fsBlurSrc1"><![CDATA[
		}

		gl_FragColor = sum / float(RADIUS * RADIUS);
	}
]]></snippet>

	<snippet name="fsBlurH"><![CDATA[
	$fsBlurSrc0
			sum += texture2D(tex, vec2(uv.x + fi * blurSize, uv.y)) * (float(rad) - abs(fi) + 1.0);
	$fsBlurSrc1
]]></snippet>

	<snippet name="fsBlurV"><![CDATA[
	$fsBlurSrc0
			sum += texture2D(tex, vec2(uv.x, uv.y + fi * blurSize)) * (float(rad) - abs(fi) + 1.0);
	$fsBlurSrc1
]]></snippet>

</snippets>