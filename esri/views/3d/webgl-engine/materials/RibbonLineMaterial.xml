<?xml version="1.0" encoding="UTF-8"?>

<snippets>

<snippet name="vsRibbonLine"><![CDATA[
	uniform mat4 proj;
	uniform mat4 view;
	uniform mat4 model;

	uniform float extLineWidth;
	uniform float nearPlane;

	attribute vec3 $position;	
	attribute vec2 $uv0;
	varying vec2 vtc;

	attribute vec4 $color;
	varying vec4 vColor;

	attribute float size;

#ifndef WALL
	uniform float miterLimit;
	attribute vec3 $auxpos1;
	attribute vec3 $auxpos2;
#endif

#ifdef SCREENSCALE
	uniform vec2 screenSize;
	$toScreenCoords
#define VECTYPE vec2
#define ZEROVEC vec2(0.0, 0.0)
#define PERPENDICULAR(v) vec2(v.y, -v.x);
#define ISOUTSIDE (left.x * right.y - left.y * right.x)*$uv0.y > 0.0

#else //ifdef SCREENSCALE

#define VECTYPE vec3
#define ZEROVEC vec3(0.0, 0.0, 0.0)
// these macros are only valid for "strip" type lines:
#define PERPENDICULAR(v) cross(up/*vec3(0.0, 1.0, 0.0)*/, v)
#define ISOUTSIDE dot(cross(left, right), up/*vec3(0.0, 1.0, 0.0)*/)*$uv0.y < 0.0

#endif //ifdef SCREENSCALE

	float interp(float ncp, vec4 a, vec4 b) {
		return (-ncp - a.z) / (b.z - a.z);
	}

#ifdef SCREENSCALE

  void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next) {
		float vnp = nearPlane*0.99;

		//We have four vertices per point on the line. Start and end vertices 
		//are treated differently --> d > 0, d < 0
		float d = abs($uv0.y) - 1.1;

		//current pos behind ncp --> we need to clip
		if(pos.z > -nearPlane) {			
			if (d < 0.0) {
				//previous in front of ncp
				if(prev.z < -nearPlane) {
					pos = mix(prev, pos, interp(vnp, prev, pos));
					next = pos;			
				} else {
				  pos = vec4(0, 0, 0, 1);
			  }
			}
			//next in front of ncp
			if(d > 0.0) {
				if(next.z < -nearPlane) {
					pos = mix(pos, next, interp(vnp, pos, next));
					prev = pos;			
				} else {
					pos = vec4(0, 0, 0, 1);
				}
			}			
		}	else { 
			//current position visible 
			//previous behind ncp
			if (prev.z > -nearPlane) {				
				prev = mix(pos, prev, interp(vnp, pos, prev));				
			}					
			//next behind ncp
			if (next.z > -nearPlane) {
				next = mix(next, pos, interp(vnp, next, pos));
			}
		}

		pos= proj * pos;
		pos.xy *= screenSize;
		pos /= pos.w;

		next = proj * next;
		next.xy *= screenSize;
		next /= next.w;

		prev = proj * prev;
		prev.xy *= screenSize;
		prev /= prev.w;		
  }

#endif // SCREENSCALE

	void main(void) {

	float lineWidth = extLineWidth + $size; 

#ifdef SCREENSCALE

#if 0
		vec4 pos = toScreenCoords($position.xyz);
		vec2 left = (pos - toScreenCoords($auxpos1)).xy;
		vec2 right = (toScreenCoords($auxpos2) - pos).xy;
#else
		vec4 pos  = view * vec4((model * vec4($position.xyz, 1.0)).xyz, 1.0); 
		vec4 prev = view * vec4((model * vec4($auxpos1.xyz, 1.0)).xyz, 1.0); 
		vec4 next = view * vec4((model * vec4($auxpos2.xyz, 1.0)).xyz, 1.0); 

		clipAndTransform(pos, prev, next);

		vec2 left = (pos - prev).xy;
		vec2 right = (next - pos).xy;
#endif

#else // ifdef SCREENSCALE
		vec4 pos = vec4($position, 1.0);
#ifndef WALL
		vec3 left = $position.xyz - $auxpos1;
		vec3 right = $auxpos2 - $position.xyz;
		vec3 up = normalize($position.xyz);
#endif // ifndef WALL
#endif // ifdef SCREENSCALE

#ifdef WALL
		float displacementLen = lineWidth;
		vec3 displacementDir = normalize($position.xyz);//vec3(0.0, 1.0, 0.0);
#else // ifdef WALL

		float leftLen = length(left);
		left = (leftLen > 0.001) ? left/leftLen : ZEROVEC;

		float rightLen = length(right);
		right = (rightLen > 0.001) ? right/rightLen : ZEROVEC;

		// determine if vertex is on the "outside or "inside" of the join
		bool isOutside = ISOUTSIDE;

		// compute miter join position first
		float displacementLen = lineWidth;
		VECTYPE displacementDir = normalize(left + right);
		displacementDir = PERPENDICULAR(displacementDir);
		if (leftLen > 0.001 && rightLen > 0.001) {
			float nDotSeg = dot(displacementDir, left);
			displacementLen /= length(nDotSeg*left - displacementDir);

			// limit displacement of inner vertices
			if (!isOutside)
				displacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));
		}

		if (isOutside && (displacementLen > miterLimit*lineWidth)) {
			// convert to bevel join if miterLimit is exceeded
			if (leftLen < 0.001)
			    displacementDir = right;
			else if (rightLen < 0.001)
				displacementDir = left;
			else
				displacementDir = (abs($uv0.y) - 1.1 < 0.0) ? left : right;
			displacementDir = normalize(displacementDir);
			displacementDir = PERPENDICULAR(displacementDir);
			displacementLen = lineWidth;
		}

#endif // ifdef WALL

#ifdef SCREENSCALE
		pos.xy += displacementDir * floor($uv0.y + 0.5) * displacementLen;
		pos.xy /= screenSize;
#else
		pos.xyz += displacementDir * floor($uv0.y + 0.5) * displacementLen;
		pos = proj * view * model * pos;
#endif

		vtc = $uv0;
		vColor = $color * 0.003921568627451; // = 1/255
		gl_Position = pos;
	}
]]></snippet>

<snippet name="fsRibbonLine"><![CDATA[
	precision mediump float;

	uniform vec4 eColor;
	varying vec4 vColor;
	varying vec2 vtc;

	void main() {
		gl_FragColor = eColor * vColor;
		//gl_FragColor.a = 1;
	}
]]></snippet>

</snippets>